<?xml version="1.0" encoding="UTF-8"?>
<user_guide>
    <metadata>
        <name>Plough</name>
        <version>0.1.x</version>
        <description>A library for implementing interactive graph drawing in Flutter applications</description>
    </metadata>

    <features>
        <feature>üìä Property graph model for flexible data structure</feature>
        <feature>üîÑ Multiple layout algorithms</feature>
        <feature>üñ±Ô∏è Interactive operations</feature>
        <feature>üé® Widget-based customization</feature>
        <feature>üé¨ Smooth initial rendering animation</feature>
    </features>

    <core_concepts>
        <data_structures>
            <graph>
                <description>Manages the entire graph, node and link collections, event-based state management</description>
                <code>final graph = Graph();</code>
            </graph>

            <node>
                <description>Manages position and size, custom properties. By default, uses 'label' for node display and 'description' for tooltip</description>
                <code>
final node = GraphNode(
  properties: {
    'label': 'Node 1',
    'description': 'First node',
    'customData': 'value'
  }
);
                </code>
            </node>

            <link>
                <description>Node connections, directionality (unidirectional/bidirectional), custom properties</description>
                <code>
final link = GraphLink(
  source: node1,
  target: node2,
  direction: GraphLinkDirection.outgoing,
  properties: {'label': 'connects'}
);
                </code>
            </link>
        </data_structures>

        <layout_strategies>
            <force_directed>
                <description>Automatic layout using physical model</description>
                <code>GraphForceDirectedLayoutStrategy()</code>
            </force_directed>

            <tree>
                <description>For hierarchical structures</description>
                <code>
GraphTreeLayoutStrategy(
  direction: GraphTreeLayoutDirection.topToBottom,
)
                </code>
            </tree>

            <random>
                <description>Random placement</description>
                <code>GraphRandomLayoutStrategy()</code>
            </random>

            <manual>
                <description>Manual node position specification</description>
                <code>
final positions = GraphNodeLayoutPosition.fromMap({
  node1.id: const Offset(0, 0),
  node2.id: const Offset(100, 100),
});
GraphManualLayoutStrategy(
  nodePositions: positions,
  origin: GraphLayoutPositionOrigin.alignCenter,
)
                </code>
            </manual>
        </layout_strategies>

        <behaviors>
            <description>Defines graph appearance and operations</description>
            <example>
class CustomBehavior extends GraphViewDefaultBehavior {
  @override
  GraphNodeViewBehavior createNodeViewBehavior() {
    return GraphNodeViewBehavior.defaultBehavior(
      nodeRendererBuilder: (context, graph, node, child) {
        return GraphDefaultNodeRenderer(
          node: node,
          style: const GraphDefaultNodeRendererStyle(
            shape: GraphDefaultNodeRendererShape.rectangle,
          ),
          child: Center(
            child: Text(node['label']! as String),
          ),
        );
      },
    );
  }
}
            </example>
            <methods>
                <method>createNodeViewBehavior(): Node display</method>
                <method>createLinkViewBehavior(): Link display</method>
                <method>getConnectionPoints(): Connection point calculation</method>
                <method>onNodeSelect(): Selection handling</method>
                <method>onNodeTap(): Tap handling</method>
                <method>onNodeDragStart/Update/End(): Drag operation handling</method>
            </methods>
        </behaviors>

        <renderers>
            <node_renderer>
                <description>Circular/rectangular shapes, customizable styles</description>
                <code>
GraphDefaultNodeRenderer(
  node: node,
  style: const GraphDefaultNodeRendererStyle(
    shape: GraphDefaultNodeRendererShape.rectangle,
    width: 100,
    height: 50,
  ),
  child: buildContent(node),
)
                </code>
            </node_renderer>

            <link_renderer>
                <description>Straight/orthogonal line drawing, arrow styles, customizable appearance</description>
            </link_renderer>
        </renderers>
    </core_concepts>

    <examples>
        <minimal_implementation>
            <description>Minimal implementation example</description>
            <code>
Widget build(BuildContext context) {
  final graph = Graph();
  
  // Create nodes
  final alice = GraphNode(properties: {
    'label': 'Alice',
    'description': 'Alice node'
  });
  final bob = GraphNode(properties: {
    'label': 'Bob',
    'description': 'Bob node'
  });
  
  // Create link
  final follow = GraphLink(
    source: alice,
    target: bob,
    properties: {
      'label': 'follows',
      'description': 'Alice follows Bob'
    },
    direction: GraphLinkDirection.outgoing,
  );
  
  // Build graph
  graph
    ..addNode(alice)
    ..addNode(bob)
    ..addLink(follow);
    
  // Display
  return GraphView(
    graph: graph,
    layoutStrategy: GraphForceDirectedLayoutStrategy(),
    behavior: const GraphViewDefaultBehavior(),
  );
}
            </code>
        </minimal_implementation>

        <custom_layout>
            <description>Triangle layout example</description>
            <code>
final basePositions = {
  nodeA.id: Offset(0.0, 0.0),      // Top
  nodeB.id: Offset(-1.0, 1.732),   // Bottom left
  nodeC.id: Offset(1.0, 1.732),    // Bottom right
};

final nodePositions = GraphNodeLayoutPosition.fromMap(
  Map.fromEntries(
    basePositions.entries.map(
      (entry) => MapEntry(
        entry.key,
        entry.value.scale(scale, scale),
      ),
    ),
  ),
);

final layoutStrategy = GraphManualLayoutStrategy(
  nodePositions: nodePositions,
  origin: GraphLayoutPositionOrigin.alignCenter,
);
            </code>
        </custom_layout>
    </examples>
</user_guide>
