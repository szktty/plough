<?xml version="1.0" encoding="UTF-8"?>
<!-- @formatter:off -->
<library>
    <!-- Library metadata -->
    <metadata>
        <product>
            <name>Plough</name>
            <description>A library for implementing interactive graph drawing in Flutter applications</description>
            <version>0.1.0</version>
            <version_info>
                <documentation>
                    <version>0.1.0</version>
                    <compatibility>
                        <min_version>0.1.0</min_version>
                        <max_version>0.1.x</max_version>
                        <note>This documentation is created for the 0.1.x series</note>
                    </compatibility>
                </documentation>
                <version_references>
                    <ref>README.md: version field in pubspec.yaml section</ref>
                    <ref>CHANGELOG.md: version history</ref>
                    <ref>pubspec.yaml: version field</ref>
                </version_references>
            </version_info>
        </product>
    </metadata>

    <version_check_rules>
        <description>Version consistency check rules</description>

        <checks>
            <check>
                <description>Check consistency between architecture.xml version and actual library version</description>
                <files_to_check>
                    <file>pubspec.yaml: version field</file>
                    <file>CHANGELOG.md: latest version</file>
                    <file>README.md: installation example</file>
                </files_to_check>
                <actions>
                    <action>Notify developers if version mismatch is detected</action>
                    <action>When a new version is released, check if documentation needs updating</action>
                </actions>
            </check>

            <check>
                <description>Version range check</description>
                <rule>Verify that current library version is within documentation's supported version range</rule>
                <action_if_outdated>If outside supported version range, suggest documentation update
                </action_if_outdated>
            </check>

            <check>
                <description>Breaking changes check</description>
                <rule>When detecting breaking changes in CHANGELOG.md history, check if documentation needs updating
                </rule>
            </check>
        </checks>
    </version_check_rules>

    <format_rules>
        <rule>This file does not apply automatic formatting considering AI assistant editing</rule>
        <rule>Apply formatting manually if needed</rule>
        <note>Please disable editor's automatic formatting</note>
    </format_rules>

    <!-- Directory structure -->
    <directory_structure>
        <rules>
            <rule id="1">
                <description>Place source code under lib, with main implementation organized under lib/src</description>
            </rule>
            <rule id="2">
                <description>Files with same name as subdirectory (e.g., graph/graph.dart) serve to collect export
                    statements
                </description>
            </rule>
            <rule id="3">
                <description>Include widgets in the widget directory</description>
            </rule>
        </rules>

        [Rest of the directory_structure section remains unchanged as it contains no Japanese text]

        <directory path="/lib">
            <description>Main library directory</description>
            <directory path="/src">
                <description>Directory containing primary implementations</description>

                <file_rules>
                    <rule id="generated1">
                        <pattern>*.freezed.dart</pattern>
                        <description>Auto-generated files by freezed package. Do not edit directly</description>
                    </rule>
                    <rule id="generated2">
                        <pattern>*.g.dart</pattern>
                        <description>Auto-generated files by build_runner. Do not edit directly</description>
                    </rule>
                </file_rules>

                <directory path="/graph">
                    <description>Provides core graph data structures (Public API)</description>
                    <files>
                        <file name="entity.dart">
                            <description>Basic graph entity definitions</description>
                        </file>
                        <file name="graph_base.dart">
                            <description>Base graph class implementation</description>
                        </file>
                        <file name="id.dart">
                            <description>Graph element ID management</description>
                        </file>
                        <file name="order_manager.dart">
                            <description>Graph element order management</description>
                        </file>
                        <file name="offset.dart">
                            <description>Graph element position management</description>
                        </file>
                    </files>
                </directory>

                <directory path="/graph_view">
                    <description>Provides graph visualization features (Public API)</description>
                    <files>
                        <file name="data.dart">
                            <description>Graph view data management</description>
                        </file>
                        <file name="geometry.dart">
                            <description>Graph view geometric calculations</description>
                        </file>
                        <file name="shape.dart">
                            <description>Graph element shape definitions</description>
                        </file>
                    </files>
                    <directory path="/widget">
                        <description>Graph view widget implementations</description>
                        <files>
                            <file name="graph.dart">
                                <description>Complete graph widget</description>
                            </file>
                            <file name="link.dart">
                                <description>Link widget implementation</description>
                            </file>
                            <file name="node.dart">
                                <description>Node widget implementation</description>
                            </file>
                            <file name="shape.dart">
                                <description>Shape-related widgets</description>
                            </file>
                        </files>
                    </directory>
                </directory>

                <directory path="/layout_strategy">
                    <description>Provides layout algorithms (Public API)</description>
                </directory>

                <directory path="/renderer">
                    <description>Provides graph element rendering features (Public API)</description>
                </directory>

                <directory path="/tooltip">
                    <description>Provides tooltip functionality (Public API)</description>
                </directory>

                <directory path="/interactive">
                    <description>Implementation of interaction features (Internal API)</description>
                    <files>
                        <file name="drag_state.dart">
                            <description>Drag state management</description>
                        </file>
                        <file name="hover_state.dart">
                            <description>Hover state management</description>
                        </file>
                        <file name="tap_state.dart">
                            <description>Tap state management</description>
                        </file>
                        <file name="tooltip_state.dart">
                            <description>Tooltip state management</description>
                        </file>
                    </files>
                    <subdirectories>
                        <directory path="/widget">
                            <description>Interaction-related widget implementations</description>
                        </directory>
                    </subdirectories>
                </directory>

                <directory path="/utils">
                    <description>Utility feature implementations (Internal API)</description>
                    <subdirectories>
                        <directory path="/widget">
                            <description>Utility widget implementations</description>
                        </directory>
                    </subdirectories>
                </directory>

                <directory path="/renderer/style">
                    <description>Rendering style definitions (Internal API)</description>
                </directory>

                <note>Other directories contain internal implementations</note>
            </directory>
        </directory>

        <directory path="/example">
            <description>Sample applications</description>
        </directory>
    </directory_structure>

    <classes>
        <category name="core">
            <description>Graph basic data structures and core functionality</description>
            <api>
                <name>GraphEntity</name>
                <type>class</type>
                <access>public</access>
                <file_path>lib/src/graph/entity.dart</file_path>
                <description>
                    Base entity class for graphs. Manages IDs and attributes. Each entity has a unique ID and can hold
                    custom properties. Implements immutable design where property changes create new instances.
                    Functions as the base class for all graph elements (nodes, links).
                </description>
            </api>
            <api>
                <name>Graph</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph/graph_base.dart</file_path>
                <description>
                    Represents core graph data structure. Manages collections of nodes and links, providing operations
                    for addition, deletion, and updates. Graph state changes are notified as events, automatically
                    updating visual representation in coordination with GraphView. Implements basic graph theory
                    algorithms including cycle detection and path finding.
                </description>
            </api>
            <api>
                <name>GraphNode</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph/node.dart</file_path>
                <description>
                    Represents a graph node. Manages position information and size, can hold custom properties. Visual
                    representation is controlled by GraphNodeViewBehavior, supporting interactions like drag and drop.
                    Also manages link relationships with other nodes.
                </description>
            </api>
            <api>
                <name>GraphLink</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph/link.dart</file_path>
                <description>
                    Represents connections between graph nodes. Has direction (uni/bidirectional) and weight, supports
                    custom properties. Visual representation is controlled by GraphLinkViewBehavior, supporting
                    different drawing styles like straight lines, curves, and orthogonal lines.
                </description>
            </api>
            <api>
                <name>GraphData</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph/graph_data.dart</file_path>
                <description>
                    Handles graph serialization and deserialization. Supports data persistence in JSON format, saving
                    and restoring graph structure and element properties. Includes version management to ensure data
                    compatibility between different versions.
                </description>
            </api>
        </category>

        <category name="view_data">
            <description>Graph view data structures and geometry calculations</description>
            <api>
                <name>GraphViewData</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph_view/data.dart</file_path>
                <description>
                    Manages graph view display state. Maintains viewport information including view size, scale, and
                    offset, tracks visibility and layout state of graph elements. Issues display update events and
                    coordinates with related components to maintain view consistency.
                </description>
            </api>
            <api>
                <name>GraphViewGeometry</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph_view/geometry.dart</file_path>
                <description>
                    Handles geometric calculations for graph view. Processes node and link placement, collision
                    detection, and viewport transformations. Provides coordinate system conversions (viewport↔graph
                    coordinates) and supports zoom and pan implementations.
                </description>
            </api>
            <api>
                <name>GraphShape</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph_view/shape.dart</file_path>
                <description>
                    Manages graph element shape definitions. Provides basic shapes like circles, rectangles, and custom
                    shapes with customizable attributes like size and corner radius. Implements hit testing and boundary
                    calculations based on shapes.
                </description>
            </api>
        </category>

        <category name="widgets">
            <description>Widgets for graph visualization and interaction</description>
            <api>
                <name>GraphView</name>
                <type>widget</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph_view/graph_view.dart</file_path>
                <description>
                    Main library widget. Integrates graph visualization, layout control, and interaction handling.
                    Supports node movement animation, selection state management, and automatic layout algorithm
                    application. Build process occurs in three phases: initialization, layout calculation, and drawing
                    preparation for performance optimization.
                </description>
            </api>
            <api>
                <name>GraphViewBehavior</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/graph_view/behavior.dart</file_path>
                <description>
                    Base class for customizing graph view behavior. Defines how interactions like drag, zoom, and
                    selection are handled, providing default implementations. Behavior can be customized for specific
                    requirements through subclassing.
                </description>
            </api>
        </category>

        <category name="layout">
            <description>Graph layout algorithms</description>
            <api>
                <name>GraphLayoutStrategy</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/layout_strategy/base.dart</file_path>
                <description>
                    Base class for layout algorithms. Defines common interface for node placement calculations, provides
                    progress notification and cancellation capabilities for layout processing. Also supports animated
                    layout updates.
                </description>
            </api>
            <api>
                <name>GraphForceDirectedLayoutStrategy</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/layout_strategy/force_directed.dart</file_path>
                <description>
                    Layout algorithm using physical model. Calculates repulsion between nodes and attraction through
                    links, placing nodes through energy minimization. Performs iterative calculation for gradual layout
                    updates, achieving natural placement transitions when combined with animation.
                </description>
            </api>
            <api>
                <name>GraphTreeLayoutStrategy</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/layout_strategy/tree.dart</file_path>
                <description>
                    Layout algorithm for hierarchical graphs. Places nodes based on parent-child relationships, supports
                    customization of horizontal/vertical placement and layer spacing. Also supports subtree folding
                    functionality.
                </description>
            </api>
            <api>
                <name>GraphRandomLayoutStrategy</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/layout_strategy/random.dart</file_path>
                <description>
                    Simple layout algorithm placing nodes at random positions. Suitable for initial layouts and demos,
                    provides options for placement range limitation and node overlap prevention.
                </description>
            </api>
            <api>
                <name>GraphManualLayoutStrategy</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/layout_strategy/manual.dart</file_path>
                <description>
                    Layout strategy enabling manual node placement. Supports position adjustment through drag and drop,
                    provides auxiliary features like snap grid and alignment guides.
                </description>
            </api>
        </category>

        <category name="renderer">
            <description>Graph element rendering functionality</description>
            <api>
                <name>GraphDefaultNodeRenderer</name>
                <type>widget</type>
                <visibility>public</visibility>
                <file_path>lib/src/renderer/widget/node.dart</file_path>
                <description>
                    Default node rendering implementation. Supports circular/rectangular shapes, customizable styling,
                    and visual representation of selection states. Allows content rendering through custom builders,
                    integrating animations and interactive elements.
                </description>
            </api>
            <api>
                <name>GraphDefaultLinkRenderer</name>
                <type>widget</type>
                <visibility>public</visibility>
                <file_path>lib/src/renderer/widget/link.dart</file_path>
                <description>
                    Default link rendering implementation. Supports straight/orthogonal connection lines and
                    uni/bidirectional arrow drawing. Provides extensive styling options for line width, color, arrow
                    size, and supports custom paths and animation effects.
                </description>
            </api>
        </category>

        <category name="tooltip">
            <description>Tooltip functionality</description>
            <api>
                <name>GraphTooltipBehavior</name>
                <type>class</type>
                <visibility>public</visibility>
                <file_path>lib/src/tooltip/behavior.dart</file_path>
                <description>
                    Controls tooltip display behavior. Supports display triggers through hover or tap, automatic
                    position adjustment, and display delay settings. Allows flexible display content customization
                    through custom content builders.
                </description>
            </api>
            <api>
                <name>GraphDefaultTooltip</name>
                <type>widget</type>
                <visibility>public</visibility>
                <file_path>lib/src/tooltip/widget/tooltip.dart</file_path>
                <description>
                    Default tooltip widget. Provides basic styling and animation effects, implements cross-platform
                    compatible interactions. Supports custom themes and layouts.
                </description>
            </api>
        </category>

        <category name="interactive">
            <description>Graph interaction functionality</description>
            <api>
                <name>GraphInteractiveGestureManager</name>
                <type>class</type>
                <access>internal</access>
                <file_path>lib/src/interactive/gesture_manager.dart</file_path>
                <description>
                    Manages gesture events and maps them to appropriate actions. Processes basic operations like tap,
                    drag, and pinch, integrating multi-touch and keyboard events.
                </description>
            </api>
            <api>
                <name>GraphInteractiveStateManager</name>
                <type>class</type>
                <visibility>internal</visibility>
                <file_path>lib/src/interactive/state_manager.dart</file_path>
                <description>
                    Manages interaction states. Tracks states like selection, drag, and hover, notifying related
                    components of state changes. Maintains consistency between multiple states.
                </description>
            </api>
        </category>

        <category name="renderer_style">
            <description>Graph element style definitions</description>
            <api>
                <name>GraphNodeStyle</name>
                <type>class</type>
                <visibility>internal</visibility>
                <file_path>lib/src/renderer/style/node.dart</file_path>
                <description>
                    Defines visual styles for nodes. Manages basic attributes like color, size, border, shadow, and
                    supports style changes based on state (normal/selected/hover).
                </description>
            </api>
            <api>
                <name>GraphLinkStyle</name>
                <type>class</type>
                <visibility>internal</visibility>
                <file_path>lib/src/renderer/style/link.dart</file_path>
                <description>
                    Defines visual styles for links. Manages line color, width, pattern, arrow styles, and supports
                    state-based style changes and animation effects.
                </description>
            </api>
        </category>

        <category name="utils">
            <description>Utility functionality</description>
            <api>
                <name>GraphLogger</name>
                <type>class</type>
                <visibility>internal</visibility>
                <file_path>lib/src/utils/logger.dart</file_path>
                <description>
                    Library-specific logger. Provides level-based logging, performance metrics recording, and error
                    tracing functionality. Supports detailed information output in debug mode.
                </description>
            </api>
            <api>
                <name>GraphSignals</name>
                <type>class</type>
                <visibility>internal</visibility>
                <file_path>lib/src/utils/signals.dart</file_path>
                <description>
                    Event management system. Defines and publishes events for graph state changes, layout updates, and
                    interactions, enabling communication between components.
                </description>
            </api>
            <api>
                <name>GraphPositionPlotter</name>
                <type>widget</type>
                <visibility>internal</visibility>
                <file_path>lib/src/utils/widget/position_plotter.dart</file_path>
                <description>
                    Debug position display widget. Visualizes node positions, link paths, and layout grids to assist
                    development debugging.
                </description>
            </api>
        </category>
    </classes>

    <!-- Architecture file management rules -->
    <architecture_file_rules>
        <description>Management rules for architecture.xml itself</description>

        <update_rules>
            <rule type="inconsistency">
                <condition>When discovering inconsistency between implementation and architecture.xml content
                </condition>
                <actions>
                    <action type="implementation_correct">
                        <description>If implementation is correct, update architecture.xml</description>
                    </action>
                    <action type="architecture_correct">
                        <description>If architecture.xml is correct, propose implementation fixes</description>
                    </action>
                    <action type="unclear">
                        <description>If unable to determine, request confirmation from developers</description>
                    </action>
                </actions>
            </rule>
            <rule type="api_change">
                <description>When there are new public APIs or directory structure changes, promptly reflect in
                    architecture.xml
                </description>
            </rule>
            <rule type="documentation">
                <description>When documentation rules or examples need to be added/updated, update this file
                </description>
            </rule>
        </update_rules>
    </architecture_file_rules>

    <consistency_checks>
        <check type="directory_structure">
            <target>Directory structure consistency</target>
            <items>
                <item>Directory structure under lib/src</item>
                <item>File locations</item>
                <item>File naming conventions</item>
            </items>
        </check>
        <check type="api">
            <target>API consistency</target>
            <items>
                <item>Existence of classes, methods, and properties</item>
                <item>Visibility (public/internal) consistency</item>
                <item>Dependency accuracy</item>
            </items>
        </check>
        <check type="documentation">
            <target>Documentation example consistency</target>
            <items>
                <item>Sample code accuracy</item>
                <item>API usage examples up-to-date status</item>
            </items>
        </check>
    </consistency_checks>

    <maintenance>
        <periodic_review>
            <timing>
                <event>When adding new features</event>
                <event>During major version updates</event>
                <event>During API changes</event>
            </timing>
        </periodic_review>
        <updates>
            <target>Outdated information</target>
            <items>
                <item>Descriptions of deprecated APIs</item>
                <item>Changed implementation details</item>
                <item>Updated dependencies</item>
            </items>
        </updates>
    </maintenance>

    <!-- AI Assistant Initialization Procedure -->
    <initialization_procedure>
        <description>AI Assistant initialization procedure after reading architecture.xml</description>

        <immediate_actions>
            <!-- Immediate analysis tasks -->
            <action id="1">
                <n>Version Consistency Check</n>
                <steps>
                    <step>Check library version</step>
                    <step>Check documentation version</step>
                    <step>Notify developers if inconsistencies exist</step>
                </steps>
            </action>

            <action id="2">
                <n>Directory Structure Verification</n>
                <steps>
                    <step>Retrieve actual directory structure</step>
                    <step>Compare with architecture.xml definitions</step>
                    <step>Report differences to developers</step>
                </steps>
            </action>

            <action id="3">
                <n>API Definition Check</n>
                <steps>
                    <step>Create public API list</step>
                    <step>Create internal API list</step>
                    <step>Identify undocumented APIs</step>
                </steps>
            </action>
        </immediate_actions>

        <initial_report>
            <!-- Initial report content for developers -->
            <report_sections>
                <section id="version">
                    <n>Version Information</n>
                    <items>
                        <item>Current version</item>
                        <item>Documentation target version</item>
                        <item>Version consistency status</item>
                    </items>
                </section>

                <section id="structure">
                    <n>Structure Analysis</n>
                    <items>
                        <item>Directory structure consistency status</item>
                        <item>Detected structural differences</item>
                        <item>Recommended updates</item>
                    </items>
                </section>

                <section id="api_status">
                    <n>API Status</n>
                    <items>
                        <item>Number of public APIs</item>
                        <item>Number of internal APIs</item>
                        <item>Documentation status</item>
                        <item>APIs requiring attention</item>
                    </items>
                </section>
            </report_sections>
        </initial_report>

        <knowledge_preparation>
            <!-- Knowledge preparation for support -->
            <tasks>
                <task id="1">
                    <n>Naming Convention Organization</n>
                    <description>Understand project naming conventions and prepare for consistency checks</description>
                </task>

                <task id="2">
                    <n>API Dependency Analysis</n>
                    <description>Create API dependency graph and prepare for impact analysis</description>
                </task>

                <task id="3">
                    <n>Documentation Template Preparation</n>
                    <description>Prepare templates for various documentation generation</description>
                </task>
            </tasks>
        </knowledge_preparation>

        <readiness_confirmation>
            <!-- Preparation completion notification for developers -->
            <confirmation_message>
                <content>The following preparations have been completed:
                    - Version consistency check
                    - Directory structure verification
                    - API definition check
                    - Initial analysis report generation

                    Ready to begin support. Please let me know if there are any points requiring special attention
                    or matters that should be addressed with priority.
                </content>
            </confirmation_message>
        </readiness_confirmation>

        <error_handling>
            <!-- Initialization error handling -->
            <scenarios>
                <scenario id="1">
                    <trigger>Version inconsistency detection</trigger>
                    <action>Request developer confirmation and determine whether to continue work</action>
                </scenario>

                <scenario id="2">
                    <trigger>Directory structure mismatch</trigger>
                    <action>Report detailed differences and confirm need for updates</action>
                </scenario>

                <scenario id="3">
                    <trigger>Detection of undocumented APIs</trigger>
                    <action>Create list of target APIs and propose prioritization</action>
                </scenario>
            </scenarios>
        </error_handling>
    </initialization_procedure>
</library>