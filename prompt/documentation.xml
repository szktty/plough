<?xml version="1.0" encoding="UTF-8"?>
<!-- @formatter:off -->
<documentation_rules>
    <meta>
        <version>2025_01_22_002</version>
        <date>2025-01-22</date>
        <version_rules>
            <format>YYYY_MM_DD_NNN</format>
            <description>Version number format</description>
            <rules>
                <rule>Date (YYYY_MM_DD): Documentation rule update date</rule>
                <rule>Number (NNN): Treated as a sequential number, continuing even when date changes</rule>
                <rule>Example: After 2025_01_22_001 comes 2025_01_23_002, keeping sequence even when date changes</rule>
            </rules>
            <notes>
                <note>Once assigned, version numbers should not be changed</note>
                <note>When creating a new version, always use the latest number plus 1</note>
            </notes>
        </version_rules>
    </meta>
    <templates>
        <template type="class">
            <format>/// A class that represents a graph component.
                ///
                /// The graph component manages internal states and layout calculations
                /// while maintaining consistency with the underlying data model.
                ///
                /// Example usage:
                /// ```dart
                /// final component = GraphComponent(
                /// data: graphData,
                /// layout: ForceLayout(),
                /// );
                /// ```
            </format>
            <notes>
                <note>Start with a clear single-sentence summary of the class purpose</note>
                <note>Follow with conceptual explanation of core functionality and behavior</note>
                <note>Include usage examples for common scenarios</note>
                <note>Avoid listing properties or methods in class comments - document them at their definition sites</note>
            </notes>
        </template>

        <template type="method">
            <format>/// {Brief description of what the method does}.
                ///
                /// {Detailed explanation if needed}.
                ///
                /// If [paramName] is invalid, throws an [Exception].
                /// Returns {description of the return value}.
            </format>
            <notes>
                <note>Start with a clear action statement</note>
                <note>Reference parameters using [paramName] syntax</note>
                <note>Describe errors and return values in prose</note>
                <note>Include examples for complex operations</note>
            </notes>
        </template>

        <template type="property">
            <format>/// {Description of what this property represents}.
                ///
                /// {Additional details about constraints or usage}
            </format>
            <notes>
                <note>Explain both what it is and how it should be used</note>
                <note>Document any constraints or side effects</note>
            </notes>
        </template>
    </templates>

    <documentation_practices>
        <linting_rules>
            <description>Rules for linter settings</description>
            <rules>
                <rule>Always preserve existing linter rules (ignore annotations)</rule>
                <rule>When adding new ignore annotations, always leave a comment explaining why</rule>
                <rule>Maintain the order of multiple ignore annotations</rule>
            </rules>
            <example>
                <title>Example of preserving linter rules:</title>
                <content>// ignore: one_member_abstracts
                    /// This interface defines a single method.
                    abstract interface class SingleMethodInterface {
                    void doSomething();
                    }
                </content>
            </example>
        </linting_rules>
        <code_preservation>
            <rule>Always preserve class declarations, annotations, and modifiers</rule>
            <rule>When updating documentation comments, do not modify the implementation code itself</rule>
            <example>
                <correct>
                    @internal
                    abstract interface class GraphEntityData {
                    /// Updated documentation
                    void method();
                    }
                </correct>
                <incorrect>
                    /// Updated documentation
                    void method(); // Class declaration lost
                </incorrect>
            </example>
        </code_preservation>

        <class_documentation>
            <description>Class documentation should follow this structure</description>
            <prerequisites>
                <description>Preparation work before creating class documentation</description>
                <validation required="true">
                    <checklist>
                        <check id="related_classes">
                            <task>Check implementation of classes for See also section</task>
                            <evidence_required>
                                <list>Checked file paths</list>
                                <summary>Main functions and relationships of each class</summary>
                            </evidence_required>
                        </check>
                        <check id="inheritance">
                            <task>Check parent class and interface implementation</task>
                            <evidence_required>
                                <list>Checked class hierarchy</list>
                                <summary>Important information from inheritance relationships</summary>
                            </evidence_required>
                        </check>
                        <check id="dependencies">
                            <task>Check implementation of main dependent classes</task>
                            <evidence_required>
                                <list>Checked dependent classes</list>
                                <summary>Important information from dependencies</summary>
                            </evidence_required>
                        </check>
                    </checklist>
                </validation>
                <notes>
                    <note>This process is especially important for core classes and public APIs</note>
                    <note>For internal implementation classes, checking related classes is optional</note>
                </notes>
            </prerequisites>
            <structure>
                <rule>Start with a single-sentence explanation of the class's essence</rule>
                <rule>Follow with conceptual explanation</rule>
                <rule>Avoid structuring with sections</rule>
                <rule>Avoid performance explanations unless instructed</rule>
                <rule>Avoid mentioning specific properties or methods. Do not include property or method lists.</rule>
                <rule>Do not include sample code unless instructed</rule>
                <rule>End with See also section referencing related classes</rule>
            </structure>
            <example>
                <title>Good class documentation example:</title>
                <content>/// Describes the configuration for an [Element].
                    ///
                    /// Widgets are the central class hierarchy in the Flutter framework. A widget
                    /// is an immutable description of part of a user interface. Widgets can be
                    /// inflated into elements, which manage the underlying render tree.
                    ///
                    /// Widgets themselves have no mutable state (all their fields must be final).
                    /// If you wish to associate mutable state with a widget, consider using a
                    /// [StatefulWidget], which creates a [State] object (via
                    /// [StatefulWidget.createState]) whenever it is inflated into an element and
                    /// incorporated into the tree.
                    ///
                    /// A given widget can be included in the tree zero or more times. In particular
                    /// a given widget can be placed in the tree multiple times. Each time a widget
                    /// is placed in the tree, it is inflated into an [Element], which means a
                    /// widget that is incorporated into the tree multiple times will be inflated
                    /// multiple times.
                    ///
                    /// The [key] property controls how one widget replaces another widget in the
                    /// tree. If the [runtimeType] and [key] properties of the two widgets are
                    /// [operator==], respectively, then the new widget replaces the old widget by
                    /// updating the underlying element (i.e., by calling [Element.update] with the
                    /// new widget). Otherwise, the old element is removed from the tree, the new
                    /// widget is inflated into an element, and the new element is inserted into the
                    /// tree.
                    ///
                    /// See also:
                    ///
                    /// * [StatefulWidget] and [State], for widgets that can build differently
                    /// several times over their lifetime.
                    /// * [InheritedWidget], for widgets that introduce ambient state that can
                    /// be read by descendant widgets.
                    /// * [StatelessWidget], for widgets that always build the same way given a
                    /// particular configuration and ambient state.
                </content>
            </example>
            <bad_example>
                <title>Class documentation example to avoid:</title>
                <content>/// A widget that lays out its children in a vertical array.
                    ///
                    /// Properties:
                    /// * [mainAxisAlignment], controls the positioning of children
                    /// * [crossAxisAlignment], determines how children are aligned
                    /// * [children], the widgets below this widget in the tree
                    ///
                    /// Methods:
                    /// * [layout], performs the layout calculation
                    /// * [paint], paints the widget and its children
                </content>
            </bad_example>
        </class_documentation>

        <method_documentation>
            <description>Method documentation should follow this structure</description>
            <example>
                <title>Good method documentation example:</title>
                <content>/// Creates a new node with the given [id] and adds it to the graph.
                    ///
                    /// If [position] is provided, places the node at that position. Otherwise,
                    /// the node is placed using the current layout algorithm.
                    /// Throws [DuplicateNodeException] if a node with [id] already exists.
                </content>
            </example>
        </method_documentation>

        <property_documentation>
            <description>Property documentation should follow this structure</description>
            <example>
                <title>Good property documentation example:</title>
                <content>/// The current layout algorithm used to position nodes.
                    ///
                    /// Changing this value triggers an immediate layout recalculation.
                </content>
            </example>
        </property_documentation>

        <constructor_documentation>
            <description>- Always document public constructors
            - No need to document whether arguments are required or optional
            </description>
        </constructor_documentation>

        <cross_references>
            <description>Use square brackets for references to other elements</description>
            <good_example>/// See [addNode] for adding nodes to this graph.</good_example>
            <bad_example>/// See the addNode method for adding nodes to this graph</bad_example>
        </cross_references>

        <error_documentation>
            <description>Describe error cases in natural prose</description>
            <good_example>/// Throws [StateError] if the graph is currently being laid out.</good_example>
            <bad_example>/// @throws StateError if busy</bad_example>
        </error_documentation>

        <state_documentation>
            <description>Rules for state management documentation</description>
            <rules>
                <rule>Document how state changes affect other components</rule>
                <rule>Always document side effects of state changes</rule>
                <rule>Pay special attention to documenting state changes from asynchronous operations</rule>
            </rules>
        </state_documentation>

        <lifecycle_documentation>
            <description>Rules for lifecycle documentation</description>
            <rules>
                <rule>Clearly document initialization and disposal procedures</rule>
                <rule>Always document when resource release is needed</rule>
                <rule>Document dependencies with parent widgets</rule>
            </rules>
        </lifecycle_documentation>
    </documentation_practices>

    <ai_assistant_guidelines>
        <guideline id="1">
            <rule>When listing properties or methods in bullet points or similar formats, use a comma after the `[]`
                reference.
                However, when using references naturally within sentences, no comma is needed.
            </rule>
            <example>
                <correct>
                    /// Features of this class include creating nodes with [createNode],
                    /// managing layouts with [updateLayout], and handling events.
                </correct>
                <incorrect>
                    /// Properties:
                    /// * [property_name], description follows
                    /// * [other_property], another description
                </incorrect>
            </example>
        </guideline>

        <guideline id="2">
            <rule>Write detailed descriptions of properties and methods at their definition sites. Class documentation
                should provide a conceptual overview without listing individual members.
            </rule>
            <example>
                <title>Good class documentation example:</title>
                <content>
                    /// A widget that manages graph visualization and interaction.
                    ///
                    /// This widget handles the rendering of nodes and edges while maintaining
                    /// the overall graph structure. It automatically updates the visualization
                    /// when the underlying data changes and provides gesture recognition for
                    /// user interaction.
                    ///
                    /// The layout of the graph is managed by a layout algorithm that can be
                    /// customized based on the specific needs of your application.
                    ///
                    /// Example usage:
                    /// ```dart
                    /// final graph = GraphWidget(
                    /// data: graphData,
                    /// layout: ForceDirectedLayout(),
                    /// );
                    /// ```
                </content>
            </example>
        </guideline>

        <guideline id="3">
            <rule>Use prose to explain parameters, return values, and exceptions in a natural way</rule>
            <examples>
                <good>/// Updates the node's position to [position] and triggers a layout update.
                    /// Returns true if the position was changed, false if it was already
                    /// at the specified position.
                </good>
                <bad>/// @param position - The new position
                    /// @returns - Success status
                </bad>
            </examples>
        </guideline>
    </ai_assistant_guidelines>

    <progress_tracking>
        <description>About documentation progress management</description>
        <rules>
            <rule>Progress management rules are defined in prompt/documentation_progress.xml</rule>
            <rule>Progress status is managed in doc/documentation_progress_status.xml</rule>
            <rule>Always follow the latest progress management rules when creating documentation</rule>
        </rules>
    </progress_tracking>

    <documentation_levels>
        <level name="core">
            <targets>Data models, major view components, customizable classes</targets>
            <depth>Relationships between related APIs, key considerations</depth>
            <examples>Typical use cases</examples>
        </level>
        <level name="standard">
            <targets>APIs primarily for reference, classes that don't need customization</targets>
            <depth>Concise overview</depth>
            <examples>Not needed</examples>
        </level>
    </documentation_levels>

    <documentation_themes>
        <generic>
            <topic>Related APIs</topic>
            <topic>Widget parent-child relationship constraints</topic>
        </generic>
        <rendering>
            <topic>Layout</topic>
            <topic>Coordinate system</topic>
        </rendering>
        <state_management>
            <topic>State update timing constraints</topic>
            <topic>Event contents if listener-enabled</topic>
        </state_management>
        <interaction>
            <topic>Supported interactions</topic>
            <topic>Event handling customization</topic>
        </interaction>
        <performance>
            <topic>Not needed at this time</topic>
        </performance>
        <customization>
            <topic>How to change layout algorithms</topic>
            <topic>Entity properties</topic>
        </customization>
    </documentation_themes>
</documentation_rules>
